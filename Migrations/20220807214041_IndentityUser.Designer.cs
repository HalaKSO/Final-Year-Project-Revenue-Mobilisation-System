// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RevenueApp.Models.Data.RevenueDBContext;

namespace RevenueApp.Migrations
{
    [DbContext(typeof(RevenueDBContext))]
    [Migration("20220807214041_IndentityUser")]
    partial class IndentityUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .IsClustered(false);

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .IsClustered(false);

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .IsClustered(false);

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider")
                        .IsClustered(false);

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleId", "UserId")
                        .IsClustered(false);

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginProvider")
                        .IsClustered(false);

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Hometown")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePic")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Residence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .IsClustered(false);

                    b.HasIndex("GenderId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.Assembly", b =>
                {
                    b.Property<int>("AssemblyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AssemblyID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssemblyName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("AssemblyId")
                        .IsClustered(false);

                    b.ToTable("Assembly");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.Business", b =>
                {
                    b.Property<int>("BusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BusID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BusBlockNumber")
                        .IsRequired()
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)");

                    b.Property<int>("BusCatId")
                        .HasColumnType("int")
                        .HasColumnName("BusCatID");

                    b.Property<string>("BusDigitalAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BusLocation")
                        .IsRequired()
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)");

                    b.Property<string>("BusName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("BusRegDate")
                        .HasColumnType("date");

                    b.Property<string>("BusTelNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .IsFixedLength(true);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.HasKey("BusId")
                        .IsClustered(false);

                    b.HasIndex("BusCatId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Business");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.BusinessBill", b =>
                {
                    b.Property<int>("BusBillNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BusArrears")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("BusBillDate")
                        .HasColumnType("date");

                    b.Property<string>("BusCurrentBill")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("BusId")
                        .HasColumnType("int")
                        .HasColumnName("BusID");

                    b.Property<string>("BusPrevPayment")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("BusRateId")
                        .HasColumnType("int")
                        .HasColumnName("BusRateID");

                    b.Property<string>("BusTotalAmtDue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("YearBill")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("BusBillNumber")
                        .IsClustered(false);

                    b.HasIndex("BusId");

                    b.HasIndex("BusRateId");

                    b.HasIndex("CustomerId");

                    b.ToTable("BusinessBill");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.BusinessCategory", b =>
                {
                    b.Property<int>("BusCatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BusCatID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BusCatName")
                        .IsRequired()
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)");

                    b.HasKey("BusCatId")
                        .IsClustered(false);

                    b.ToTable("BusinessCategory");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.BusinessDailyPayment", b =>
                {
                    b.Property<int>("BusPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BusPaymentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BusAmount")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("BusBillNumber")
                        .HasColumnType("int");

                    b.Property<int>("BusId")
                        .HasColumnType("int")
                        .HasColumnName("BusID");

                    b.Property<DateTime>("BusPaymentDate")
                        .HasColumnType("date");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.HasKey("BusPaymentId")
                        .IsClustered(false);

                    b.HasIndex("BusBillNumber");

                    b.HasIndex("BusId");

                    b.HasIndex("CustomerId");

                    b.ToTable("BusinessDailyPayment");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.BusinessRate", b =>
                {
                    b.Property<int>("BusRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BusRateID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusCatId")
                        .HasColumnType("int")
                        .HasColumnName("BusCatID");

                    b.Property<string>("BusRate")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("BusRateId")
                        .IsClustered(false);

                    b.HasIndex("BusCatId");

                    b.ToTable("BusinessRate");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerContact")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .IsFixedLength(true);

                    b.Property<string>("CustomerDigitalAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CustomerDoB")
                        .HasColumnType("date");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)");

                    b.Property<string>("CustomerFname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CustomerFName");

                    b.Property<string>("CustomerLname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CustomerLName");

                    b.Property<string>("CustomerNationality")
                        .IsRequired()
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)");

                    b.Property<string>("CustomerNextOfKin")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("CustomerNextOfKinContact")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .IsFixedLength(true);

                    b.Property<string>("CustomerResidentialAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CustomerSsn")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CustomerSSN");

                    b.Property<string>("CustomerTinNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .IsFixedLength(true);

                    b.Property<int>("GenderId")
                        .HasColumnType("int")
                        .HasColumnName("GenderID");

                    b.Property<string>("GhanaCardNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .IsFixedLength(true);

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<int>("RelationId")
                        .HasColumnType("int")
                        .HasColumnName("RelationID");

                    b.Property<int>("TitleId")
                        .HasColumnType("int")
                        .HasColumnName("TitleID");

                    b.HasKey("CustomerId")
                        .IsClustered(false);

                    b.HasIndex("GenderId");

                    b.HasIndex("ImageId");

                    b.HasIndex("RelationId");

                    b.HasIndex("TitleId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GenderID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GenderType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("GenderId")
                        .IsClustered(false);

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.House", b =>
                {
                    b.Property<int>("HseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HseID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("HseBlockNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("HseCatId")
                        .HasColumnType("int")
                        .HasColumnName("HseCatID");

                    b.Property<string>("HseDigitalAddress")
                        .IsRequired()
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)");

                    b.Property<string>("HseLocation")
                        .IsRequired()
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)");

                    b.Property<string>("HseName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("HseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("HseRegDate")
                        .HasColumnType("date");

                    b.Property<string>("HseTelNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .IsFixedLength(true);

                    b.HasKey("HseId")
                        .IsClustered(false);

                    b.HasIndex("CustomerId");

                    b.HasIndex("HseCatId");

                    b.ToTable("House");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.HouseBill", b =>
                {
                    b.Property<int>("HseBillNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("HseArrears")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("HseBillDate")
                        .HasColumnType("date");

                    b.Property<string>("HseCurrentBill")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("HseId")
                        .HasColumnType("int")
                        .HasColumnName("HseID");

                    b.Property<string>("HsePrevPayment")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("HseRateId")
                        .HasColumnType("int")
                        .HasColumnName("HseRateID");

                    b.Property<string>("HseTotalAmtDue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("YearBill")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("HseBillNumber")
                        .IsClustered(false);

                    b.HasIndex("CustomerId");

                    b.HasIndex("HseId");

                    b.HasIndex("HseRateId");

                    b.ToTable("HouseBill");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.HouseCategory", b =>
                {
                    b.Property<int>("HseCatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HseCatID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HseCatName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("HseCatId")
                        .IsClustered(false);

                    b.ToTable("HouseCategory");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.HouseDailyPayment", b =>
                {
                    b.Property<int>("HsePaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HsePaymentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("HseAmount")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("HseId")
                        .HasColumnType("int")
                        .HasColumnName("HseID");

                    b.Property<DateTime>("HsePaymentDate")
                        .HasColumnType("date");

                    b.HasKey("HsePaymentId")
                        .IsClustered(false);

                    b.HasIndex("CustomerId");

                    b.HasIndex("HseId");

                    b.ToTable("HouseDailyPayment");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.HouseRate", b =>
                {
                    b.Property<int>("HseRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HseRateID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HseCatId")
                        .HasColumnType("int")
                        .HasColumnName("HseCatID");

                    b.Property<string>("HseRate")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("HseRateId")
                        .IsClustered(false);

                    b.HasIndex("HseCatId");

                    b.ToTable("HouseRate");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Photo")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("ImageId")
                        .IsClustered(false);

                    b.ToTable("Image");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.OfficeRank", b =>
                {
                    b.Property<int>("RankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RankID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RankName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("RankId")
                        .IsClustered(false);

                    b.ToTable("OfficeRank");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.OfficerAdmin", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StaffID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssemblyId")
                        .HasColumnType("int")
                        .HasColumnName("AssemblyID");

                    b.Property<int>("GenderId")
                        .HasColumnType("int")
                        .HasColumnName("GenderID");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("OfficerContact")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .IsFixedLength(true);

                    b.Property<string>("OfficerDigitalAddress")
                        .IsRequired()
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)");

                    b.Property<DateTime>("OfficerDoB")
                        .HasColumnType("date");

                    b.Property<string>("OfficerEmail")
                        .IsRequired()
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)");

                    b.Property<string>("OfficerFname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("OfficerFName");

                    b.Property<string>("OfficerLname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("OfficerLName");

                    b.Property<string>("OfficerNextOfKin")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("OfficerNextOfKinContact")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .IsFixedLength(true);

                    b.Property<string>("OfficerResidentialAddress")
                        .IsRequired()
                        .HasMaxLength(65)
                        .IsUnicode(false)
                        .HasColumnType("varchar(65)");

                    b.Property<int>("RankId")
                        .HasColumnType("int")
                        .HasColumnName("RankID");

                    b.Property<int>("RelationId")
                        .HasColumnType("int")
                        .HasColumnName("RelationID");

                    b.Property<int>("TitleId")
                        .HasColumnType("int")
                        .HasColumnName("TitleID");

                    b.HasKey("StaffId")
                        .IsClustered(false);

                    b.HasIndex("AssemblyId");

                    b.HasIndex("GenderId");

                    b.HasIndex("ImageId");

                    b.HasIndex("RankId");

                    b.HasIndex("RelationId");

                    b.HasIndex("TitleId");

                    b.ToTable("OfficerAdmin");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.Relation", b =>
                {
                    b.Property<int>("RelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RelationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RelationType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RelationId")
                        .IsClustered(false);

                    b.ToTable("Relation");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.Title", b =>
                {
                    b.Property<int>("TitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TitleID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TitleName")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength(true);

                    b.HasKey("TitleId")
                        .IsClustered(false);

                    b.ToTable("Title");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RevenueApp.Models.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RevenueApp.Models.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RevenueApp.Models.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RevenueApp.Models.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RevenueApp.Models.Data.ApplicationUser", b =>
                {
                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.Business", b =>
                {
                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.BusinessCategory", "BusCat")
                        .WithMany("Businesses")
                        .HasForeignKey("BusCatId")
                        .HasConstraintName("FK_BusinessCategory_Business")
                        .IsRequired();

                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.Customer", "Customer")
                        .WithMany("Businesses")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Customer_Business")
                        .IsRequired();

                    b.Navigation("BusCat");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.BusinessBill", b =>
                {
                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.Business", "Bus")
                        .WithMany("BusinessBills")
                        .HasForeignKey("BusId")
                        .HasConstraintName("FK_Business_BusinessBill")
                        .IsRequired();

                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.BusinessRate", "BusRate")
                        .WithMany("BusinessBills")
                        .HasForeignKey("BusRateId")
                        .HasConstraintName("FK_BusinessRate_BusinessBill")
                        .IsRequired();

                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.Customer", "Customer")
                        .WithMany("BusinessBills")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Customer_BusinessBill")
                        .IsRequired();

                    b.Navigation("Bus");

                    b.Navigation("BusRate");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.BusinessDailyPayment", b =>
                {
                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.BusinessBill", "BusBillNumberNavigation")
                        .WithMany("BusinessDailyPayments")
                        .HasForeignKey("BusBillNumber")
                        .HasConstraintName("FK_BusinessDailyPayment_BusinessBill")
                        .IsRequired();

                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.Business", "Bus")
                        .WithMany("BusinessDailyPayments")
                        .HasForeignKey("BusId")
                        .HasConstraintName("FK_Business_BusinessDailyPayment")
                        .IsRequired();

                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.Customer", "Customer")
                        .WithMany("BusinessDailyPayments")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Customer_BusinessDailyPayment")
                        .IsRequired();

                    b.Navigation("Bus");

                    b.Navigation("BusBillNumberNavigation");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.BusinessRate", b =>
                {
                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.BusinessCategory", "BusCat")
                        .WithMany("BusinessRates")
                        .HasForeignKey("BusCatId")
                        .HasConstraintName("FK_BusinessCategory_BusinessRate")
                        .IsRequired();

                    b.Navigation("BusCat");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.Customer", b =>
                {
                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.Gender", "Gender")
                        .WithMany("Customers")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("FK_Gender_Customer")
                        .IsRequired();

                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.Image", "Image")
                        .WithMany("Customers")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("FK_Image_Customer")
                        .IsRequired();

                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.Relation", "Relation")
                        .WithMany("Customers")
                        .HasForeignKey("RelationId")
                        .HasConstraintName("FK_Relation_Customer")
                        .IsRequired();

                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.Title", "Title")
                        .WithMany("Customers")
                        .HasForeignKey("TitleId")
                        .HasConstraintName("FK_Title_Customer")
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("Image");

                    b.Navigation("Relation");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.House", b =>
                {
                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.Customer", "Customer")
                        .WithMany("Houses")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Customer_House")
                        .IsRequired();

                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.HouseCategory", "HseCat")
                        .WithMany("Houses")
                        .HasForeignKey("HseCatId")
                        .HasConstraintName("FK_HouseCategory_House")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("HseCat");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.HouseBill", b =>
                {
                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.Customer", "Customer")
                        .WithMany("HouseBills")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Customer_HouseBill")
                        .IsRequired();

                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.House", "Hse")
                        .WithMany("HouseBills")
                        .HasForeignKey("HseId")
                        .HasConstraintName("FK_House_HouseBill")
                        .IsRequired();

                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.HouseRate", "HseRate")
                        .WithMany("HouseBills")
                        .HasForeignKey("HseRateId")
                        .HasConstraintName("FK_HouseRate_HouseBill")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Hse");

                    b.Navigation("HseRate");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.HouseDailyPayment", b =>
                {
                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.Customer", "Customer")
                        .WithMany("HouseDailyPayments")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Customer_HouseDailyPayment")
                        .IsRequired();

                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.House", "Hse")
                        .WithMany("HouseDailyPayments")
                        .HasForeignKey("HseId")
                        .HasConstraintName("FK_House_HouseDailyPayment")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Hse");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.HouseRate", b =>
                {
                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.HouseCategory", "HseCat")
                        .WithMany("HouseRates")
                        .HasForeignKey("HseCatId")
                        .HasConstraintName("FK_HouseCategory_HouseRate")
                        .IsRequired();

                    b.Navigation("HseCat");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.OfficerAdmin", b =>
                {
                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.Assembly", "Assembly")
                        .WithMany("OfficerAdmins")
                        .HasForeignKey("AssemblyId")
                        .HasConstraintName("FK_Assembly_OfficerAdmin")
                        .IsRequired();

                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.Gender", "Gender")
                        .WithMany("OfficerAdmins")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("FK_Gender_OfficerAdmin")
                        .IsRequired();

                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.Image", "Image")
                        .WithMany("OfficerAdmins")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("FK_Image_OfficerAdmin")
                        .IsRequired();

                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.OfficeRank", "Rank")
                        .WithMany("OfficerAdmins")
                        .HasForeignKey("RankId")
                        .HasConstraintName("FK_OfficeRank_OfficerAdmin")
                        .IsRequired();

                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.Relation", "Relation")
                        .WithMany("OfficerAdmins")
                        .HasForeignKey("RelationId")
                        .HasConstraintName("FK_Relation_OfficerAdmin")
                        .IsRequired();

                    b.HasOne("RevenueApp.Models.Data.RevenueDBContext.Title", "Title")
                        .WithMany("OfficerAdmins")
                        .HasForeignKey("TitleId")
                        .HasConstraintName("FK_Title_OfficerAdmin")
                        .IsRequired();

                    b.Navigation("Assembly");

                    b.Navigation("Gender");

                    b.Navigation("Image");

                    b.Navigation("Rank");

                    b.Navigation("Relation");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.Assembly", b =>
                {
                    b.Navigation("OfficerAdmins");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.Business", b =>
                {
                    b.Navigation("BusinessBills");

                    b.Navigation("BusinessDailyPayments");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.BusinessBill", b =>
                {
                    b.Navigation("BusinessDailyPayments");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.BusinessCategory", b =>
                {
                    b.Navigation("Businesses");

                    b.Navigation("BusinessRates");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.BusinessRate", b =>
                {
                    b.Navigation("BusinessBills");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.Customer", b =>
                {
                    b.Navigation("BusinessBills");

                    b.Navigation("BusinessDailyPayments");

                    b.Navigation("Businesses");

                    b.Navigation("HouseBills");

                    b.Navigation("HouseDailyPayments");

                    b.Navigation("Houses");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.Gender", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("OfficerAdmins");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.House", b =>
                {
                    b.Navigation("HouseBills");

                    b.Navigation("HouseDailyPayments");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.HouseCategory", b =>
                {
                    b.Navigation("HouseRates");

                    b.Navigation("Houses");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.HouseRate", b =>
                {
                    b.Navigation("HouseBills");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.Image", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("OfficerAdmins");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.OfficeRank", b =>
                {
                    b.Navigation("OfficerAdmins");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.Relation", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("OfficerAdmins");
                });

            modelBuilder.Entity("RevenueApp.Models.Data.RevenueDBContext.Title", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("OfficerAdmins");
                });
#pragma warning restore 612, 618
        }
    }
}
